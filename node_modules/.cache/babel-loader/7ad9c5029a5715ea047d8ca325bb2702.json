{"ast":null,"code":"var _jsxFileName = \"/Users/developer/Documents/GitHub/word-master/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport { letters, status } from './constants';\nimport { useEffect, useState } from 'react';\nimport { EndGameModal } from './components/EndGameModal';\nimport { InfoModal } from './components/InfoModal';\nimport { Keyboard } from './components/Keyboard';\nimport { SettingsModal } from './components/SettingsModal';\nimport answers from './data/answers';\nimport { useLocalStorage } from './hooks/useLocalStorage';\nimport { ReactComponent as Info } from './data/Info.svg';\nimport { ReactComponent as Settings } from './data/Settings.svg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst words = require('./data/words').default;\n\nconst state = {\n  playing: 'playing',\n  won: 'won',\n  lost: 'lost'\n};\nexport const difficulty = {\n  easy: 'easy',\n  normal: 'normal',\n  hard: 'hard'\n};\n\nconst getRandomAnswer = () => {\n  const randomIndex = Math.floor(Math.random() * answers.length);\n  return answers[randomIndex].toUpperCase();\n};\n\nfunction App() {\n  _s();\n\n  const initialStates = {\n    answer: () => getRandomAnswer(),\n    gameState: state.playing,\n    board: [['', '', '', '', ''], ['', '', '', '', ''], ['', '', '', '', ''], ['', '', '', '', ''], ['', '', '', '', ''], ['', '', '', '', '']],\n    cellStatuses: Array(6).fill(Array(5).fill(status.unguessed)),\n    currentRow: 0,\n    currentCol: 0,\n    letterStatuses: () => {\n      const letterStatuses = {};\n      letters.forEach(letter => {\n        letterStatuses[letter] = status.unguessed;\n      });\n      return letterStatuses;\n    },\n    submittedInvalidWord: false\n  };\n  const [answer, setAnswer] = useLocalStorage('stateAnswer', initialStates.answer());\n  const [gameState, setGameState] = useLocalStorage('stateGameState', initialStates.gameState);\n  const [board, setBoard] = useLocalStorage('stateBoard', initialStates.board);\n  const [cellStatuses, setCellStatuses] = useLocalStorage('stateCellStatuses', initialStates.cellStatuses);\n  const [currentRow, setCurrentRow] = useLocalStorage('stateCurrentRow', initialStates.currentRow);\n  const [currentCol, setCurrentCol] = useLocalStorage('stateCurrentCol', initialStates.currentCol);\n  const [letterStatuses, setLetterStatuses] = useLocalStorage('stateLetterStatuses', initialStates.letterStatuses());\n  const [submittedInvalidWord, setSubmittedInvalidWord] = useLocalStorage('stateSubmittedInvalidWord', initialStates.submittedInvalidWord);\n  const [currentStreak, setCurrentStreak] = useLocalStorage('current-streak', 0);\n  const [longestStreak, setLongestStreak] = useLocalStorage('longest-streak', 0);\n  const [modalIsOpen, setIsOpen] = useState(false);\n  const [firstTime, setFirstTime] = useLocalStorage('first-time', true);\n  const [guessesInStreak, setGuessesInStreak] = useLocalStorage('guesses-in-streak', firstTime ? 0 : -1);\n  const [infoModalIsOpen, setInfoModalIsOpen] = useState(firstTime);\n  const [settingsModalIsOpen, setSettingsModalIsOpen] = useState(false);\n  const [difficultyLevel, setDifficultyLevel] = useLocalStorage('difficulty', difficulty.normal);\n\n  const getDifficultyLevelInstructions = () => {\n    if (difficultyLevel === difficulty.easy) {\n      return 'Guess any 5 letters';\n    } else if (difficultyLevel === difficulty.hard) {\n      return \"Guess any valid word using all the hints you've been given\";\n    } else {\n      return 'Guess any valid word';\n    }\n  };\n\n  const eg = {};\n  const [exactGuesses, setExactGuesses] = useLocalStorage('exact-guesses', eg);\n\n  const openModal = () => setIsOpen(true);\n\n  const closeModal = () => setIsOpen(false);\n\n  const handleInfoClose = () => {\n    setFirstTime(false);\n    setInfoModalIsOpen(false);\n  };\n\n  const [hideGiveUp, setHideGiveUp] = useState(true);\n  useEffect(() => {\n    setTimeout(() => {\n      setHideGiveUp(false);\n    }, 40000);\n  }, []);\n  const [darkMode, setDarkMode] = useLocalStorage('dark-mode', false);\n\n  const toggleDarkMode = () => setDarkMode(prev => !prev);\n\n  useEffect(() => document.documentElement.classList[darkMode ? 'add' : 'remove']('dark'), [darkMode]);\n  useEffect(() => {\n    if (gameState !== state.playing) {\n      setTimeout(() => {\n        openModal();\n      }, 500);\n    }\n  }, [gameState]);\n\n  const getCellStyles = (rowNumber, colNumber, letter) => {\n    if (rowNumber === currentRow) {\n      if (letter) {\n        return `nm-inset-background dark:nm-inset-background-dark text-primary dark:text-primary-dark ${submittedInvalidWord ? 'border border-red-800' : ''}`;\n      }\n\n      return 'nm-flat-background dark:nm-flat-background-dark text-primary dark:text-primary-dark';\n    }\n\n    switch (cellStatuses[rowNumber][colNumber]) {\n      case status.green:\n        return 'nm-inset-n-green text-gray-50';\n\n      case status.yellow:\n        return 'nm-inset-yellow-500 text-gray-50';\n\n      case status.gray:\n        return 'nm-inset-n-gray text-gray-50';\n\n      default:\n        return 'nm-flat-background dark:nm-flat-background-dark text-primary dark:text-primary-dark';\n    }\n  };\n\n  const addLetter = letter => {\n    setSubmittedInvalidWord(false);\n    setBoard(prev => {\n      if (currentCol > 4) {\n        return prev;\n      }\n\n      const newBoard = [...prev];\n      newBoard[currentRow][currentCol] = letter;\n      return newBoard;\n    });\n\n    if (currentCol < 5) {\n      setCurrentCol(prev => prev + 1);\n    }\n  }; // returns an array with a boolean of if the word is valid and an error message if it is not\n\n\n  const isValidWord = word => {\n    if (word.length < 5) return [false, `please enter a 5 letter word`];\n    if (difficultyLevel === difficulty.easy) return [true];\n    if (!words[word.toLowerCase()]) return [false, `${word} is not a valid word. Please try again.`];\n    if (difficultyLevel === difficulty.normal) return [true];\n    const guessedLetters = Object.entries(letterStatuses).filter(_ref => {\n      let [letter, letterStatus] = _ref;\n      return [status.yellow, status.green].includes(letterStatus);\n    });\n    const yellowsUsed = guessedLetters.every(_ref2 => {\n      let [letter, _] = _ref2;\n      return word.includes(letter);\n    });\n    const greensUsed = Object.entries(exactGuesses).every(_ref3 => {\n      let [position, letter] = _ref3;\n      return word[parseInt(position)] === letter;\n    });\n    if (!yellowsUsed || !greensUsed) return [false, `In hard mode, you must use all the hints you've been given.`];\n    return [true];\n  };\n\n  const onEnterPress = () => {\n    const word = board[currentRow].join('');\n    const [valid, _err] = isValidWord(word);\n\n    if (!valid) {\n      console.log({\n        valid,\n        _err\n      });\n      setSubmittedInvalidWord(true); // alert(_err)\n\n      return;\n    }\n\n    if (currentRow === 6) return;\n    updateCellStatuses(word, currentRow);\n    updateLetterStatuses(word);\n    setCurrentRow(prev => prev + 1);\n    setCurrentCol(0); // Only calculate guesses in streak if they've\n    // started a new streak since this feature was added.\n\n    if (guessesInStreak >= 0) {\n      setGuessesInStreak(prev => prev + 1);\n    }\n  };\n\n  const onDeletePress = () => {\n    setSubmittedInvalidWord(false);\n    if (currentCol === 0) return;\n    setBoard(prev => {\n      const newBoard = [...prev];\n      newBoard[currentRow][currentCol - 1] = '';\n      return newBoard;\n    });\n    setCurrentCol(prev => prev - 1);\n  };\n\n  const updateCellStatuses = (word, rowNumber) => {\n    const fixedLetters = {};\n    setCellStatuses(prev => {\n      const newCellStatuses = [...prev];\n      newCellStatuses[rowNumber] = [...prev[rowNumber]];\n      const wordLength = word.length;\n      const answerLetters = answer.split(''); // set all to gray\n\n      for (let i = 0; i < wordLength; i++) {\n        newCellStatuses[rowNumber][i] = status.gray;\n      } // check greens\n\n\n      for (let i = wordLength - 1; i >= 0; i--) {\n        if (word[i] === answer[i]) {\n          newCellStatuses[rowNumber][i] = status.green;\n          answerLetters.splice(i, 1);\n          fixedLetters[i] = answer[i];\n        }\n      } // check yellows\n\n\n      for (let i = 0; i < wordLength; i++) {\n        if (answerLetters.includes(word[i]) && newCellStatuses[rowNumber][i] !== status.green) {\n          newCellStatuses[rowNumber][i] = status.yellow;\n          answerLetters.splice(answerLetters.indexOf(word[i]), 1);\n        }\n      }\n\n      return newCellStatuses;\n    });\n    setExactGuesses(prev => ({ ...prev,\n      ...fixedLetters\n    }));\n  };\n\n  const isRowAllGreen = row => {\n    return row.every(cell => cell === status.green);\n  };\n\n  const avgGuessesPerGame = () => {\n    if (currentStreak > 0) {\n      return guessesInStreak / currentStreak;\n    } else {\n      return 0;\n    }\n  }; // every time cellStatuses updates, check if the game is won or lost\n\n\n  useEffect(() => {\n    const cellStatusesCopy = [...cellStatuses];\n    const reversedStatuses = cellStatusesCopy.reverse();\n    const lastFilledRow = reversedStatuses.find(r => {\n      return r[0] !== status.unguessed;\n    });\n\n    if (gameState === state.playing && lastFilledRow && isRowAllGreen(lastFilledRow)) {\n      setGameState(state.won);\n      var streak = currentStreak + 1;\n      setCurrentStreak(streak);\n      setLongestStreak(prev => streak > prev ? streak : prev);\n    } else if (gameState === state.playing && currentRow === 6) {\n      setGameState(state.lost);\n      setCurrentStreak(0);\n    }\n  }, [cellStatuses, currentRow, gameState, setGameState, currentStreak, setCurrentStreak, setLongestStreak]);\n\n  const updateLetterStatuses = word => {\n    setLetterStatuses(prev => {\n      const newLetterStatuses = { ...prev\n      };\n      const wordLength = word.length;\n\n      for (let i = 0; i < wordLength; i++) {\n        if (newLetterStatuses[word[i]] === status.green) continue;\n\n        if (word[i] === answer[i]) {\n          newLetterStatuses[word[i]] = status.green;\n        } else if (answer.includes(word[i])) {\n          newLetterStatuses[word[i]] = status.yellow;\n        } else {\n          newLetterStatuses[word[i]] = status.gray;\n        }\n      }\n\n      return newLetterStatuses;\n    });\n  };\n\n  const playAgain = () => {\n    if (gameState === state.lost) {\n      setGuessesInStreak(0);\n    }\n\n    setAnswer(initialStates.answer());\n    setGameState(initialStates.gameState);\n    setBoard(initialStates.board);\n    setCellStatuses(initialStates.cellStatuses);\n    setCurrentRow(initialStates.currentRow);\n    setCurrentCol(initialStates.currentCol);\n    setLetterStatuses(initialStates.letterStatuses());\n    setSubmittedInvalidWord(initialStates.submittedInvalidWord);\n    setExactGuesses({});\n    setHideGiveUp(true);\n    setTimeout(function () {\n      setHideGiveUp(false);\n    }, 40000);\n    closeModal();\n  };\n\n  const modalStyles = {\n    overlay: {\n      position: 'fixed',\n      top: 0,\n      left: 0,\n      right: 0,\n      bottom: 0,\n      backgroundColor: darkMode ? 'hsl(231, 16%, 25%)' : 'hsl(231, 16%, 92%)',\n      zIndex: 99\n    },\n    content: {\n      top: '50%',\n      left: '50%',\n      right: 'auto',\n      bottom: 'auto',\n      transform: 'translate(-50%, -50%)',\n      height: 'calc(100% - 2rem)',\n      width: 'calc(100% - 2rem)',\n      backgroundColor: darkMode ? 'hsl(231, 16%, 25%)' : 'hsl(231, 16%, 92%)',\n      boxShadow: `${darkMode ? '0.2em 0.2em calc(0.2em * 2) #252834, calc(0.2em * -1) calc(0.2em * -1) calc(0.2em * 2) #43475C' : '0.2em 0.2em calc(0.2em * 2) #A3A7BD, calc(0.2em * -1) calc(0.2em * -1) calc(0.2em * 2) #FFFFFF'}`,\n      border: 'none',\n      borderRadius: '1rem',\n      maxWidth: '475px',\n      maxHeight: '650px',\n      position: 'relative'\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `flex flex-col justify-between h-fill bg-background dark:bg-background-dark`,\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"flex items-center py-2 px-3 text-primary dark:text-primary-dark\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: () => setSettingsModalIsOpen(true),\n          className: \"p-1 rounded-full\",\n          children: /*#__PURE__*/_jsxDEV(Settings, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 387,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"flex-1 text-center text-xl xxs:text-2xl sm:text-4xl tracking-wide font-bold font-righteous\",\n          children: \"WORD MASTER\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 389,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: () => setInfoModalIsOpen(true),\n          className: \"p-1 rounded-full\",\n          children: /*#__PURE__*/_jsxDEV(Info, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 397,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 392,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center flex-col py-3 flex-1 justify-center relative\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"relative\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"grid grid-cols-5 grid-flow-row gap-4\",\n            children: board.map((row, rowNumber) => row.map((letter, colNumber) => /*#__PURE__*/_jsxDEV(\"span\", {\n              className: `${getCellStyles(rowNumber, colNumber, letter)} inline-flex items-center font-medium justify-center text-lg w-[13vw] h-[13vw] xs:w-14 xs:h-14 sm:w-20 sm:h-20 rounded-full`,\n              children: letter\n            }, colNumber, false, {\n              fileName: _jsxFileName,\n              lineNumber: 405,\n              columnNumber: 19\n            }, this)))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 402,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `flex justify-center pt-6 ${hideGiveUp ? 'hidden' : ''}`,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: darkMode ? 'dark' : '',\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                autoFocus: true,\n                type: \"button\",\n                className: \"rounded-lg z-10 px-6 py-2 text-lg nm-flat-background dark:nm-flat-background-dark hover:nm-inset-background dark:hover:nm-inset-background-dark text-primary dark:text-primary-dark\",\n                onClick: () => {\n                  setGameState(state.lost);\n                  setCurrentStreak(0);\n                },\n                children: \"Give Up\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 424,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 423,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 418,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `absolute -bottom-24 left-1/2 transform -translate-x-1/2 ${gameState === state.playing ? 'hidden' : ''}`,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: darkMode ? 'dark' : '',\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                autoFocus: true,\n                type: \"button\",\n                className: \"rounded-lg z-10 px-6 py-2 text-lg nm-flat-background dark:nm-flat-background-dark hover:nm-inset-background dark:hover:nm-inset-background-dark text-primary dark:text-primary-dark\",\n                onClick: playAgain,\n                children: \"Play Again\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 440,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 439,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 434,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 401,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 400,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InfoModal, {\n        isOpen: infoModalIsOpen,\n        handleClose: handleInfoClose,\n        darkMode: darkMode,\n        styles: modalStyles\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 452,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(EndGameModal, {\n        isOpen: modalIsOpen,\n        handleClose: closeModal,\n        styles: modalStyles,\n        darkMode: darkMode,\n        gameState: gameState,\n        state: state,\n        currentStreak: currentStreak,\n        longestStreak: longestStreak,\n        answer: answer,\n        playAgain: playAgain,\n        avgGuessesPerGame: avgGuessesPerGame()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 458,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SettingsModal, {\n        isOpen: settingsModalIsOpen,\n        handleClose: () => setSettingsModalIsOpen(false),\n        styles: modalStyles,\n        darkMode: darkMode,\n        toggleDarkMode: toggleDarkMode,\n        difficultyLevel: difficultyLevel,\n        setDifficultyLevel: setDifficultyLevel,\n        levelInstructions: getDifficultyLevelInstructions()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 471,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `h-auto relative ${gameState === state.playing ? '' : 'invisible'}`,\n        children: /*#__PURE__*/_jsxDEV(Keyboard, {\n          letterStatuses: letterStatuses,\n          addLetter: addLetter,\n          onEnterPress: onEnterPress,\n          onDeletePress: onDeletePress,\n          gameDisabled: gameState !== state.playing\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 482,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 481,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 379,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"WU34HyP9cwkxK7nCs9ioUY1Xi5c=\", false, function () {\n  return [useLocalStorage, useLocalStorage, useLocalStorage, useLocalStorage, useLocalStorage, useLocalStorage, useLocalStorage, useLocalStorage, useLocalStorage, useLocalStorage, useLocalStorage, useLocalStorage, useLocalStorage, useLocalStorage, useLocalStorage];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/developer/Documents/GitHub/word-master/src/App.tsx"],"names":["letters","status","useEffect","useState","EndGameModal","InfoModal","Keyboard","SettingsModal","answers","useLocalStorage","ReactComponent","Info","Settings","words","require","default","state","playing","won","lost","difficulty","easy","normal","hard","getRandomAnswer","randomIndex","Math","floor","random","length","toUpperCase","App","initialStates","answer","gameState","board","cellStatuses","Array","fill","unguessed","currentRow","currentCol","letterStatuses","forEach","letter","submittedInvalidWord","setAnswer","setGameState","setBoard","setCellStatuses","setCurrentRow","setCurrentCol","setLetterStatuses","setSubmittedInvalidWord","currentStreak","setCurrentStreak","longestStreak","setLongestStreak","modalIsOpen","setIsOpen","firstTime","setFirstTime","guessesInStreak","setGuessesInStreak","infoModalIsOpen","setInfoModalIsOpen","settingsModalIsOpen","setSettingsModalIsOpen","difficultyLevel","setDifficultyLevel","getDifficultyLevelInstructions","eg","exactGuesses","setExactGuesses","openModal","closeModal","handleInfoClose","hideGiveUp","setHideGiveUp","setTimeout","darkMode","setDarkMode","toggleDarkMode","prev","document","documentElement","classList","getCellStyles","rowNumber","colNumber","green","yellow","gray","addLetter","newBoard","isValidWord","word","toLowerCase","guessedLetters","Object","entries","filter","letterStatus","includes","yellowsUsed","every","_","greensUsed","position","parseInt","onEnterPress","join","valid","_err","console","log","updateCellStatuses","updateLetterStatuses","onDeletePress","fixedLetters","newCellStatuses","wordLength","answerLetters","split","i","splice","indexOf","isRowAllGreen","row","cell","avgGuessesPerGame","cellStatusesCopy","reversedStatuses","reverse","lastFilledRow","find","r","streak","newLetterStatuses","playAgain","modalStyles","overlay","top","left","right","bottom","backgroundColor","zIndex","content","transform","height","width","boxShadow","border","borderRadius","maxWidth","maxHeight","map"],"mappings":"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","sourcesContent":["import { letters, status } from './constants'\nimport { useEffect, useState } from 'react'\n\nimport { EndGameModal } from './components/EndGameModal'\nimport { InfoModal } from './components/InfoModal'\nimport { Keyboard } from './components/Keyboard'\nimport { SettingsModal } from './components/SettingsModal'\nimport answers from './data/answers'\nimport { useLocalStorage } from './hooks/useLocalStorage'\nimport { ReactComponent as Info } from './data/Info.svg'\nimport { ReactComponent as Settings } from './data/Settings.svg'\nconst words = require('./data/words').default as { [key: string]: boolean }\n\nconst state = {\n  playing: 'playing',\n  won: 'won',\n  lost: 'lost',\n}\n\nexport const difficulty = {\n  easy: 'easy',\n  normal: 'normal',\n  hard: 'hard',\n}\n\nconst getRandomAnswer = () => {\n  const randomIndex = Math.floor(Math.random() * answers.length)\n  return answers[randomIndex].toUpperCase()\n}\n\ntype State = {\n  answer: () => string\n  gameState: string\n  board: string[][]\n  cellStatuses: string[][]\n  currentRow: number\n  currentCol: number\n  letterStatuses: () => { [key: string]: string }\n  submittedInvalidWord: boolean\n}\n\nfunction App() {\n  const initialStates: State = {\n    answer: () => getRandomAnswer(),\n    gameState: state.playing,\n    board: [\n      ['', '', '', '', ''],\n      ['', '', '', '', ''],\n      ['', '', '', '', ''],\n      ['', '', '', '', ''],\n      ['', '', '', '', ''],\n      ['', '', '', '', ''],\n    ],\n    cellStatuses: Array(6).fill(Array(5).fill(status.unguessed)),\n    currentRow: 0,\n    currentCol: 0,\n    letterStatuses: () => {\n      const letterStatuses: { [key: string]: string } = {}\n      letters.forEach((letter) => {\n        letterStatuses[letter] = status.unguessed\n      })\n      return letterStatuses\n    },\n    submittedInvalidWord: false,\n  }\n\n  const [answer, setAnswer] = useLocalStorage('stateAnswer', initialStates.answer())\n  const [gameState, setGameState] = useLocalStorage('stateGameState', initialStates.gameState)\n  const [board, setBoard] = useLocalStorage('stateBoard', initialStates.board)\n  const [cellStatuses, setCellStatuses] = useLocalStorage(\n    'stateCellStatuses',\n    initialStates.cellStatuses\n  )\n  const [currentRow, setCurrentRow] = useLocalStorage('stateCurrentRow', initialStates.currentRow)\n  const [currentCol, setCurrentCol] = useLocalStorage('stateCurrentCol', initialStates.currentCol)\n  const [letterStatuses, setLetterStatuses] = useLocalStorage(\n    'stateLetterStatuses',\n    initialStates.letterStatuses()\n  )\n  const [submittedInvalidWord, setSubmittedInvalidWord] = useLocalStorage(\n    'stateSubmittedInvalidWord',\n    initialStates.submittedInvalidWord\n  )\n\n  const [currentStreak, setCurrentStreak] = useLocalStorage('current-streak', 0)\n  const [longestStreak, setLongestStreak] = useLocalStorage('longest-streak', 0)\n  const [modalIsOpen, setIsOpen] = useState(false)\n  const [firstTime, setFirstTime] = useLocalStorage('first-time', true)\n  const [guessesInStreak, setGuessesInStreak] = useLocalStorage(\n    'guesses-in-streak',\n    firstTime ? 0 : -1\n  )\n  const [infoModalIsOpen, setInfoModalIsOpen] = useState(firstTime)\n  const [settingsModalIsOpen, setSettingsModalIsOpen] = useState(false)\n  const [difficultyLevel, setDifficultyLevel] = useLocalStorage('difficulty', difficulty.normal)\n  const getDifficultyLevelInstructions = () => {\n    if (difficultyLevel === difficulty.easy) {\n      return 'Guess any 5 letters'\n    } else if (difficultyLevel === difficulty.hard) {\n      return \"Guess any valid word using all the hints you've been given\"\n    } else {\n      return 'Guess any valid word'\n    }\n  }\n  const eg: { [key: number]: string } = {}\n  const [exactGuesses, setExactGuesses] = useLocalStorage('exact-guesses', eg)\n\n  const openModal = () => setIsOpen(true)\n  const closeModal = () => setIsOpen(false)\n  const handleInfoClose = () => {\n    setFirstTime(false)\n    setInfoModalIsOpen(false)\n  }\n\n  const [hideGiveUp,setHideGiveUp] = useState(true)\n  \n  useEffect(()=>{\n    setTimeout(() => {\n      setHideGiveUp(false)\n         }, 40000);\n       },\n   [])\n\n  const [darkMode, setDarkMode] = useLocalStorage('dark-mode', false)\n  const toggleDarkMode = () => setDarkMode((prev: boolean) => !prev)\n\n  useEffect(\n    () => document.documentElement.classList[darkMode ? 'add' : 'remove']('dark'),\n    [darkMode]\n  )\n\n  useEffect(() => {\n    if (gameState !== state.playing) {\n      setTimeout(() => {\n        openModal()\n      }, 500)\n    }\n  }, [gameState])\n\n  const getCellStyles = (rowNumber: number, colNumber: number, letter: string) => {\n    if (rowNumber === currentRow) {\n      if (letter) {\n        return `nm-inset-background dark:nm-inset-background-dark text-primary dark:text-primary-dark ${\n          submittedInvalidWord ? 'border border-red-800' : ''\n        }`\n      }\n      return 'nm-flat-background dark:nm-flat-background-dark text-primary dark:text-primary-dark'\n    }\n\n    switch (cellStatuses[rowNumber][colNumber]) {\n      case status.green:\n        return 'nm-inset-n-green text-gray-50'\n      case status.yellow:\n        return 'nm-inset-yellow-500 text-gray-50'\n      case status.gray:\n        return 'nm-inset-n-gray text-gray-50'\n      default:\n        return 'nm-flat-background dark:nm-flat-background-dark text-primary dark:text-primary-dark'\n    }\n  }\n\n  const addLetter = (letter: string) => {\n    setSubmittedInvalidWord(false)\n    setBoard((prev: string[][]) => {\n      if (currentCol > 4) {\n        return prev\n      }\n      const newBoard = [...prev]\n      newBoard[currentRow][currentCol] = letter\n      return newBoard\n    })\n    if (currentCol < 5) {\n      setCurrentCol((prev: number) => prev + 1)\n    }\n  }\n\n  // returns an array with a boolean of if the word is valid and an error message if it is not\n  const isValidWord = (word: string): [boolean] | [boolean, string] => {\n    if (word.length < 5) return [false, `please enter a 5 letter word`]\n    if (difficultyLevel === difficulty.easy) return [true]\n    if (!words[word.toLowerCase()]) return [false, `${word} is not a valid word. Please try again.`]\n    if (difficultyLevel === difficulty.normal) return [true]\n    const guessedLetters = Object.entries(letterStatuses).filter(([letter, letterStatus]) =>\n      [status.yellow, status.green].includes(letterStatus)\n    )\n    const yellowsUsed = guessedLetters.every(([letter, _]) => word.includes(letter))\n    const greensUsed = Object.entries(exactGuesses).every(\n      ([position, letter]) => word[parseInt(position)] === letter\n    )\n    if (!yellowsUsed || !greensUsed)\n      return [false, `In hard mode, you must use all the hints you've been given.`]\n    return [true]\n  }\n\n  const onEnterPress = () => {\n    const word = board[currentRow].join('')\n    const [valid, _err] = isValidWord(word)\n    if (!valid) {\n      console.log({ valid, _err })\n      setSubmittedInvalidWord(true)\n      // alert(_err)\n      return\n    }\n\n    if (currentRow === 6) return\n\n    updateCellStatuses(word, currentRow)\n    updateLetterStatuses(word)\n    setCurrentRow((prev: number) => prev + 1)\n    setCurrentCol(0)\n\n    // Only calculate guesses in streak if they've\n    // started a new streak since this feature was added.\n    if (guessesInStreak >= 0) {\n      setGuessesInStreak((prev: number) => prev + 1)\n    }\n  }\n\n  const onDeletePress = () => {\n    setSubmittedInvalidWord(false)\n    if (currentCol === 0) return\n\n    setBoard((prev: any) => {\n      const newBoard = [...prev]\n      newBoard[currentRow][currentCol - 1] = ''\n      return newBoard\n    })\n\n    setCurrentCol((prev: number) => prev - 1)\n  }\n\n  const updateCellStatuses = (word: string, rowNumber: number) => {\n    const fixedLetters: { [key: number]: string } = {}\n    setCellStatuses((prev: any) => {\n      const newCellStatuses = [...prev]\n      newCellStatuses[rowNumber] = [...prev[rowNumber]]\n      const wordLength = word.length\n      const answerLetters: string[] = answer.split('')\n\n      // set all to gray\n      for (let i = 0; i < wordLength; i++) {\n        newCellStatuses[rowNumber][i] = status.gray\n      }\n\n      // check greens\n      for (let i = wordLength - 1; i >= 0; i--) {\n        if (word[i] === answer[i]) {\n          newCellStatuses[rowNumber][i] = status.green\n          answerLetters.splice(i, 1)\n          fixedLetters[i] = answer[i]\n        }\n      }\n\n      // check yellows\n      for (let i = 0; i < wordLength; i++) {\n        if (answerLetters.includes(word[i]) && newCellStatuses[rowNumber][i] !== status.green) {\n          newCellStatuses[rowNumber][i] = status.yellow\n          answerLetters.splice(answerLetters.indexOf(word[i]), 1)\n        }\n      }\n\n      return newCellStatuses\n    })\n    setExactGuesses((prev: { [key: number]: string }) => ({ ...prev, ...fixedLetters }))\n  }\n\n  const isRowAllGreen = (row: string[]) => {\n    return row.every((cell: string) => cell === status.green)\n  }\n\n  const avgGuessesPerGame = (): number => {\n    if (currentStreak > 0) {\n      return guessesInStreak / currentStreak\n    } else {\n      return 0\n    }\n  }\n\n  // every time cellStatuses updates, check if the game is won or lost\n  useEffect(() => {\n    const cellStatusesCopy = [...cellStatuses]\n    const reversedStatuses = cellStatusesCopy.reverse()\n    const lastFilledRow = reversedStatuses.find((r) => {\n      return r[0] !== status.unguessed\n    })\n\n    if (gameState === state.playing && lastFilledRow && isRowAllGreen(lastFilledRow)) {\n      setGameState(state.won)\n\n      var streak = currentStreak + 1\n      setCurrentStreak(streak)\n      setLongestStreak((prev: number) => (streak > prev ? streak : prev))\n    } else if (gameState === state.playing && currentRow === 6) {\n      setGameState(state.lost)\n      setCurrentStreak(0)\n    }\n  }, [\n    cellStatuses,\n    currentRow,\n    gameState,\n    setGameState,\n    currentStreak,\n    setCurrentStreak,\n    setLongestStreak,\n  ])\n\n  const updateLetterStatuses = (word: string) => {\n    setLetterStatuses((prev: { [key: string]: string }) => {\n      const newLetterStatuses = { ...prev }\n      const wordLength = word.length\n      for (let i = 0; i < wordLength; i++) {\n        if (newLetterStatuses[word[i]] === status.green) continue\n\n        if (word[i] === answer[i]) {\n          newLetterStatuses[word[i]] = status.green\n        } else if (answer.includes(word[i])) {\n          newLetterStatuses[word[i]] = status.yellow\n        } else {\n          newLetterStatuses[word[i]] = status.gray\n        }\n      }\n      return newLetterStatuses\n    })\n  }\n\n  const playAgain = () => {\n    if (gameState === state.lost) {\n      setGuessesInStreak(0)\n    }\n\n    setAnswer(initialStates.answer())\n    setGameState(initialStates.gameState)\n    setBoard(initialStates.board)\n    setCellStatuses(initialStates.cellStatuses)\n    setCurrentRow(initialStates.currentRow)\n    setCurrentCol(initialStates.currentCol)\n    setLetterStatuses(initialStates.letterStatuses())\n    setSubmittedInvalidWord(initialStates.submittedInvalidWord)\n    setExactGuesses({})\n\n    setHideGiveUp(true)\n    setTimeout(function() {setHideGiveUp(false)}, 40000);\n    closeModal()\n  }\n\n  const modalStyles = {\n    overlay: {\n      position: 'fixed',\n      top: 0,\n      left: 0,\n      right: 0,\n      bottom: 0,\n      backgroundColor: darkMode ? 'hsl(231, 16%, 25%)' : 'hsl(231, 16%, 92%)',\n      zIndex: 99,\n    },\n    content: {\n      top: '50%',\n      left: '50%',\n      right: 'auto',\n      bottom: 'auto',\n      transform: 'translate(-50%, -50%)',\n      height: 'calc(100% - 2rem)',\n      width: 'calc(100% - 2rem)',\n      backgroundColor: darkMode ? 'hsl(231, 16%, 25%)' : 'hsl(231, 16%, 92%)',\n      boxShadow: `${\n        darkMode\n          ? '0.2em 0.2em calc(0.2em * 2) #252834, calc(0.2em * -1) calc(0.2em * -1) calc(0.2em * 2) #43475C'\n          : '0.2em 0.2em calc(0.2em * 2) #A3A7BD, calc(0.2em * -1) calc(0.2em * -1) calc(0.2em * 2) #FFFFFF'\n      }`,\n      border: 'none',\n      borderRadius: '1rem',\n      maxWidth: '475px',\n      maxHeight: '650px',\n      position: 'relative',\n    },\n  }\n\n  return (\n    <div>\n      <div className={`flex flex-col justify-between h-fill bg-background dark:bg-background-dark`}>\n        <header className=\"flex items-center py-2 px-3 text-primary dark:text-primary-dark\">\n          <button\n            type=\"button\"\n            onClick={() => setSettingsModalIsOpen(true)}\n            className=\"p-1 rounded-full\"\n          >\n            <Settings />\n          </button>\n          <h1 className=\"flex-1 text-center text-xl xxs:text-2xl sm:text-4xl tracking-wide font-bold font-righteous\">\n            WORD MASTER\n          </h1>\n          <button\n            type=\"button\"\n            onClick={() => setInfoModalIsOpen(true)}\n            className=\"p-1 rounded-full\"\n          >\n            <Info />\n          </button>\n        </header>\n        <div className=\"flex items-center flex-col py-3 flex-1 justify-center relative\">\n          <div className=\"relative\">\n            <div className=\"grid grid-cols-5 grid-flow-row gap-4\">\n              {board.map((row: string[], rowNumber: number) =>\n                row.map((letter: string, colNumber: number) => (\n                  <span\n                    key={colNumber}\n                    className={`${getCellStyles(\n                      rowNumber,\n                      colNumber,\n                      letter\n                    )} inline-flex items-center font-medium justify-center text-lg w-[13vw] h-[13vw] xs:w-14 xs:h-14 sm:w-20 sm:h-20 rounded-full`}\n                  >\n                    {letter}\n                  </span>\n                ))\n              )}\n            </div>       \n            <div\n              className={`flex justify-center pt-6 ${\n                hideGiveUp ? 'hidden' : ''\n              }`}\n            >\n              <div className={darkMode ? 'dark' : ''}>\n                <button\n                    autoFocus\n                    type=\"button\"\n                    className=\"rounded-lg z-10 px-6 py-2 text-lg nm-flat-background dark:nm-flat-background-dark hover:nm-inset-background dark:hover:nm-inset-background-dark text-primary dark:text-primary-dark\"\n                    onClick={() => {setGameState(state.lost); setCurrentStreak(0)}}\n                  >\n                  Give Up\n                </button>\n              </div>\n            </div>\n            <div\n              className={`absolute -bottom-24 left-1/2 transform -translate-x-1/2 ${\n                gameState === state.playing ? 'hidden' : ''\n              }`}\n            >\n              <div className={darkMode ? 'dark' : ''}>\n                <button\n                  autoFocus\n                  type=\"button\"\n                  className=\"rounded-lg z-10 px-6 py-2 text-lg nm-flat-background dark:nm-flat-background-dark hover:nm-inset-background dark:hover:nm-inset-background-dark text-primary dark:text-primary-dark\"\n                  onClick={playAgain}\n                >\n                  Play Again\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n        <InfoModal\n          isOpen={infoModalIsOpen}\n          handleClose={handleInfoClose}\n          darkMode={darkMode}\n          styles={modalStyles}\n        />\n        <EndGameModal\n          isOpen={modalIsOpen}\n          handleClose={closeModal}\n          styles={modalStyles}\n          darkMode={darkMode}\n          gameState={gameState}\n          state={state}\n          currentStreak={currentStreak}\n          longestStreak={longestStreak}\n          answer={answer}\n          playAgain={playAgain}\n          avgGuessesPerGame={avgGuessesPerGame()}\n        />\n        <SettingsModal\n          isOpen={settingsModalIsOpen}\n          handleClose={() => setSettingsModalIsOpen(false)}\n          styles={modalStyles}\n          darkMode={darkMode}\n          toggleDarkMode={toggleDarkMode}\n          difficultyLevel={difficultyLevel}\n          setDifficultyLevel={setDifficultyLevel}\n          levelInstructions={getDifficultyLevelInstructions()}\n        />\n        <div className={`h-auto relative ${gameState === state.playing ? '' : 'invisible'}`}>\n          <Keyboard\n            letterStatuses={letterStatuses}\n            addLetter={addLetter}\n            onEnterPress={onEnterPress}\n            onDeletePress={onDeletePress}\n            gameDisabled={gameState !== state.playing}\n          />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}